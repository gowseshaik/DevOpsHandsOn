Docker network

enterprise level:
we must use overlay and bridge networks
1. Overlay network
2. bridge network(rarely) (default Bridge network IP's will not ping, which means it doesn't have named resolutions, os it will not ping. so we have to create custom/user bridge networks)

local level:
host, None networks for local purpose.
note: None(null) network doesn't have any IP's and it doesn't have Ethernet interface itself.

Network Drivers:
Bridge
Host
None
Overlay
Macvlan

Note: Containers are staeless(where containers doesn't have data), it will remove and recreates.
Application will not work on IP adresses, works on host-name based. 
so in swarm services come's into picture.

why you can ask, Docker will connect with internal DNS resolution.
Docker is an immutable architechture.
will not upgrade docker

Datacenter wise, you should have good knowledge. to become an architechture.
you have to think in a big picture, fault taulerant.

To make out Development faster.

for 3 tier applications --> 3 overlay networks --> move to swarm by creating swarm networks.
we wont upgrade/update container, this is called immutable architechture.


Static application : there will be no frequent updates, then go for VM
Dynamic application: there will be frequent updates, then go for Containers.



Bridge:
=======
It is a private default network created on the host
Containers linked to this network have an internal IP address through which they communicate with each other easily
The Docker server (daemon) creates a virtual ethernet bridge docker0 that operates automatically, by delivering packets among various network interfaces
These are widely used when applications are executed in a standalone container 
Host:
=====
It is a public network
It utilizes the host’s IP address and TCP port space to display the services running inside the container
It effectively disables network isolation between the docker host and the docker containers, which means using this network driver a user will be unable to run multiple containers on the same host
None:
=====
In this network driver, the Docker containers will neither have any access to external networks nor will it be able to communicate with other containers
This option is used when a user wants to disable the networking access to a container 
In simple terms, None is called a loopback interface, which means it has no external network interfaces 
Overlay:
=========
This is utilized for creating an internal private network to the Docker nodes in the Docker swarm cluster
Note: Docker Swarm is a service for containers which facilitates developer teams to build and manage a cluster of swarm nodes within the Docker platform
It is an important network driver in Docker networking. It helps in providing the interaction between the stand-alone container and the Docker swarm service
Macvlan:
========
It simplifies the communication process between containers
This network assigns a MAC address to the Docker container. With this Mac address, the Docker server (daemon) routes the network traffic to a router
Note: Docker Daemon is a server which interacts with the operating system and performs all kind of services
It is suitable when a user wants to directly connect the container to the physical network rather than the Docker host


Basic Docker Networking Commands
Let’s discuss some of the important networking commands that are widely used by the developer teams.

List down the Networks associated with Docker 
=============================================
$ docker network ls 

The above command displays all the networks available on the Docker ecosystem

to create a network
====================
# docker network create vodafone --subnet 192.168.0.1/14
# docker network inspect vodafone
# docker run -itd --network vodafone centos


Connect a Running Container to a Network
========================================
$ docker network connect multi-host-network container

In the command shown above, You can also use the docker network option to start a container and immediately connect it to multiple host networks.

Specify the IP Address that you want to assign to the Container
================================================================
$ docker network connect --IP 10.10.36.122 multi-host-network container

In the above command, a user can specify the IP address (for example, 10.10.36.122) that he/she wants to assign to the container interface.

Create a Network alias for a Container
=======================================
$ docker network connect --alias db --alias mysql multi-host-network container2

In the above command, we have specified Aliases to define new commands and to rectify incorrect input

Disconnect a Container from a Network
=======================================
$ docker network disconnect multi-host-network container1

In the above command, the disconnect option is used to stop the running docker containers on multiple host network

Remove a Network
=================
$ docker network rm network_name

In the above command, the rm option is used to remove a network from the Docker ecosystem

Remove Multiple Network
========================
$ docker network rm 3695c422697f network_name

The above command can be used when a user wants to remove multiple networks at a time 

Remove all Unused Networks
============================
$ docker network prune

The above ‘prune’ command can be used when a user wants to remove all unused networks at a time 


