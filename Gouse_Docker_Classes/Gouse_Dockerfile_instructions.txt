The following instructions are available in Dockerfiles:

ADD:
====
Copies files from the build context or remote URLs into the image. If an archive
file is added from a local path, it will automatically be unpacked. As the range of
functionality covered by ADD is quite large, it’s generally best to prefer the simpler
COPY command for copying files and directories in the build context and RUN
instructions with curl or wget to download remote resources (which retains the
possibility of processing and deleting the download in the same instruction).


CMD:
====
Runs the given instruction when the container is started. If an ENTRYPOINT has
been defined, the instruction will be interpreted as an argument to the ENTRY
POINT (in this case, make sure you use the exec format). The CMD instruction is
overridden by any arguments to docker run after the image name. Only the last
CMD instruction will have an effect, and any previous CMD instructions will be
overridden (including those in base images).


COPY:
=====
Used to copy files from the build context into the image. It has two forms, COPY
src dest_ and COPY ["src", "dest"] , both of which copy the file or directory
at src in the build context to dest inside the container. The JSON array format is
required if the paths have spaces in them. Wildcards can be used to specify multi‐
ple files or directories. Note that you cannot specify src paths outside the build
context (e.g., ../another_dir/myfile will not work).


ENTRYPOINT:
===========
Sets an executable (and default arguments) to be run when the container starts.
Any CMD instructions or arguments to docker run after the image name will be
passed as parameters to the executable. ENTRYPOINT instructions are often used to
provide “starter” scripts that initialize variables and services before interpreting
any given arguments.


ENV:
====
Sets environment variables inside the image. These can be referred to in subse‐
quent instructions. For example:
...
ENV MY_VERSION 1.3
RUN apt-get install -y mypackage=$MY_VERSION
...
The variables will also be available inside the image.


EXPOSE:
=======
Indicates to Docker that the container will have a process listening on the given
port or ports. This information is used by Docker when linking containers (see “Linking Containers”) or publishing ports by supplying the -P argument to
docker run ; by itself the EXPOSE instruction will not affect networking.


FROM:
=====
Sets the base image for the Dockerfile; subsequent instructions build on top of
this image. The base image is specified as IMAGE:TAG (e.g., debian:wheezy ). If the
tag is omitted, it is assumed to be latest , but I strongly recommend you always
set the tag to a specific version to avoid surprises. Must be the first instruction in
a Dockerfile.


MAINTAINER:
===========
Sets the “Author” metadata on the image to the given string. You can retrieve this
with docker inspect -f {{.Author}} IMAGE . Normally used to set the name
and contact details of the maintainer of the image.


ONBUILD:
========
Specifies an instruction to be executed later, when the image is used as the base
layer to another image. This can be useful for processing data that will be added
in a child image (e.g., the instruction may copy in code from a chosen directory
and run a build script on the data).


RUN:
====
Runs the given instruction inside the container and commits the result.


USER:
=====
Sets the user (by name or UID) to use in any subsequent RUN , CMD , or ENTRYPOINT
instructions. Note that UIDs are the same between the host and container, but
usernames may be assigned to different UIDs, which can make things tricky
when setting permissions.


VOLUME:
=======
Declares the specified file or directory to be a volume. If the file or directory
already exists in the image, it will copied into the volume when the container is
started. If multiple arguments are given, they are interpreted as multiple volume
statements. You cannot specify the host directory for a volume inside a Docker‐
file for portability and security reasons. For more information, see “Managing
Data with Volumes and Data Containers”.


WORKDIR:
========
Sets the working directory for any subsequent RUN , CMD , ENTRYPOINT , ADD , or COPY
instructions. Can be used multiple times. Relative paths may be used and are
resolved relative to the previous WORKDIR.






